     1                                  ; naskfunc.nas - 现代化的 NASM 语法
     2                                  ; TAB=4
     3                                  ; 提供操作系统开发所需的底层汇编函数
     4                                  
     5                                  ; ---------------------------------
     6                                  ; 说明：
     7                                  ; - 使用标准 NASM 语法，不使用旧的 NASK 专有指令
     8                                  ; - 所有函数使用 cdecl 调用约定（参数从右到左压栈，调用者清理栈）
     9                                  ; ---------------------------------
    10                                  
    11                                  BITS 32         ; 32 位保护模式代码
    12                                  SECTION .text   ; 代码段
    13                                  
    14                                  ; ---------------------------------
    15                                  ; 声明全局符号（导出给 C 语言使用）
    16                                  ; ---------------------------------
    17                                  GLOBAL  io_hlt, io_cli, io_sti, io_stihlt
    18                                  GLOBAL  io_in8, io_in16, io_in32
    19                                  GLOBAL  io_out8, io_out16, io_out32
    20                                  GLOBAL  io_load_eflags, io_store_eflags
    21                                  GLOBAL  write_mem8
    22                                  
    23                                  ; =================================
    24                                  ; CPU 控制指令
    25                                  ; =================================
    26                                  
    27                                  io_hlt:         ; void io_hlt(void);
    28 00000000 F4                          HLT         ; 暂停 CPU，等待下一次中断
    29 00000001 C3                          RET
    30                                  
    31                                  io_cli:         ; void io_cli(void);
    32 00000002 FA                          CLI         ; 禁用中断（Clear Interrupt Flag）
    33 00000003 C3                          RET
    34                                  
    35                                  io_sti:         ; void io_sti(void);
    36 00000004 FB                          STI         ; 启用中断（Set Interrupt Flag）
    37 00000005 C3                          RET
    38                                  
    39                                  io_stihlt:      ; void io_stihlt(void);
    40 00000006 FB                          STI         ; 开中断
    41 00000007 F4                          HLT         ; 暂停（等待中断唤醒）
    42 00000008 C3                          RET
    43                                  
    44                                  ; =================================
    45                                  ; 端口输入指令（从设备读取数据）
    46                                  ; =================================
    47                                  
    48                                  io_in8:         ; int io_in8(int port);
    49 00000009 8B542404                    MOV     EDX, [ESP+4]    ; EDX = port
    50 0000000D B800000000                  MOV     EAX, 0          ; 清空 EAX
    51 00000012 EC                          IN      AL, DX          ; 从端口读取 8 位数据到 AL
    52 00000013 C3                          RET
    53                                  
    54                                  io_in16:        ; int io_in16(int port);
    55 00000014 8B542404                    MOV     EDX, [ESP+4]    ; EDX = port
    56 00000018 B800000000                  MOV     EAX, 0          ; 清空 EAX
    57 0000001D 66ED                        IN      AX, DX          ; 从端口读取 16 位数据到 AX
    58 0000001F C3                          RET
    59                                  
    60                                  io_in32:        ; int io_in32(int port);
    61 00000020 8B542404                    MOV     EDX, [ESP+4]    ; EDX = port
    62 00000024 ED                          IN      EAX, DX         ; 从端口读取 32 位数据到 EAX
    63 00000025 C3                          RET
    64                                  
    65                                  ; =================================
    66                                  ; 端口输出指令（向设备写入数据）
    67                                  ; =================================
    68                                  
    69                                  io_out8:        ; void io_out8(int port, int data);
    70 00000026 8B542404                    MOV     EDX, [ESP+4]    ; EDX = port
    71 0000002A 8A442408                    MOV     AL, [ESP+8]     ; AL = data (低 8 位)
    72 0000002E EE                          OUT     DX, AL          ; 向端口输出 8 位数据
    73 0000002F C3                          RET
    74                                  
    75                                  io_out16:       ; void io_out16(int port, int data);
    76 00000030 8B542404                    MOV     EDX, [ESP+4]    ; EDX = port
    77 00000034 8B442408                    MOV     EAX, [ESP+8]    ; EAX = data
    78 00000038 66EF                        OUT     DX, AX          ; 向端口输出 16 位数据
    79 0000003A C3                          RET
    80                                  
    81                                  io_out32:       ; void io_out32(int port, int data);
    82 0000003B 8B542404                    MOV     EDX, [ESP+4]    ; EDX = port
    83 0000003F 8B442408                    MOV     EAX, [ESP+8]    ; EAX = data
    84 00000043 EF                          OUT     DX, EAX         ; 向端口输出 32 位数据
    85 00000044 C3                          RET
    86                                  
    87                                  ; =================================
    88                                  ; EFLAGS 寄存器操作
    89                                  ; =================================
    90                                  
    91                                  io_load_eflags:     ; int io_load_eflags(void);
    92 00000045 9C                          PUSHFD              ; 将 EFLAGS 压栈（PUSH EFLAGS Doubleword）
    93 00000046 58                          POP     EAX         ; 弹出到 EAX 返回
    94 00000047 C3                          RET
    95                                  
    96                                  io_store_eflags:    ; void io_store_eflags(int eflags);
    97 00000048 8B442404                    MOV     EAX, [ESP+4]    ; EAX = eflags
    98 0000004C 50                          PUSH    EAX             ; 压栈
    99 0000004D 9D                          POPFD                   ; 从栈恢复到 EFLAGS（POP to EFLAGS Doubleword）
   100 0000004E C3                          RET
   101                                  
   102                                  ; =================================
   103                                  ; 内存操作辅助函数
   104                                  ; =================================
   105                                  
   106                                  write_mem8:     ; void write_mem8(int addr, int data);
   107 0000004F 8B4C2404                    MOV     ECX, [ESP+4]    ; ECX = addr
   108 00000053 8A442408                    MOV     AL, [ESP+8]     ; AL = data (低 8 位)
   109 00000057 8801                        MOV     [ECX], AL       ; 写入内存 [addr] = data
   110 00000059 C3                          RET
